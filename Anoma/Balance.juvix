module Anoma.Balance;

import Anoma.Prelude open;
import Data.ByteString open;
import Anoma.Resource open;
import Anoma.Kind open;
import Anoma.Asset open;

import Data.Map as Map;

type Balance := mkBalance {assets : List Asset};

emptyBalance : Balance :=
  mkBalance@{
    assets := []
  };

addBalance (b1 : Balance) (b2 : Balance) : Balance :=
  let
    assetList : List (Kind × Int) :=
      map (a in Balance.assets b1 ++ Balance.assets b2)
        Asset.kind a, Asset.quantity a;
    combinedAssetList : List (Kind × Int) :=
      Map.toList (Map.fromListWith (+) assetList);
    combinedAssets : List Asset :=
      map (k, q in combinedAssetList)
        mkAsset@{
          kind := k;
          quantity := q
        };
  in mkBalance combinedAssets;

negateBalance (b : Balance) : Balance :=
  mkBalance
    (map (a in Balance.assets b)
      a@Asset{quantity := neg quantity});

subBalance (b1 : Balance) (b2 : Balance) : Balance :=
  addBalance b1 (negateBalance b2);

sumBalances (bs : List Balance) : Balance :=
  for (acc := emptyBalance) (b in bs)
    addBalance acc b;

balanceIsZero (b : Balance) : Bool :=
  all (a in Balance.assets b)
    Asset.quantity a == 0;
