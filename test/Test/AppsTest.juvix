module Test.AppsTest;

import Simulator open;

import Data.Map as Map;
open Map using {Map};

import Simulator.Prelude open;
import Stdlib.System.IO.Base open;
import Stdlib.Trait.Partial open;

import Apps.TwoPartyExchange as TwoPartyExchange;
open TwoPartyExchange hiding {logicFunctions};

import Apps.Sudoku as Sudoku;
open Sudoku hiding {logicFunctions};

import Test.JuvixUnit open;

twoPartyExchange {{Partial}} : Test :=
  let
    txs : List PartialTx :=
      [ Alice.partialTransaction
      ; Bob.partialTransaction
      ; Solver.partialTransaction
      ];
  in testCase
    "two party exchange"
    (assertTrue
      "expected two-party exchange transactions to validate"
      (checkTransaction TwoPartyExchange.logicFunctions txs));

sudoku {{Partial}} : Test :=
  let
    solution : ByteString :=
      [1; 2; 3; 4; 3; 4; 1; 2; 2; 3; 4; 1; 4; 1; 2; 3];

    puzzleData : Sudoku.Puzzle :=
      Sudoku.mkPuzzle (logicHash := 3; solution := solution);

    dealerPartialTx : PartialTx :=
      dealer puzzleData (1 :: replicate 15 0);

    alicePartialTx : PartialTx :=
      mkPartialTx
        (createdResources := [ Sudoku.mkResource
                               puzzleData
                               (1 :: 2 :: replicate 14 0)
                               1
                             ; Reward.mkResource 1
                             ];
        consumedResources := [ Sudoku.mkResource
                               puzzleData
                               (1 :: replicate 15 0)
                               1
                             ]);

    bobPartialTx : PartialTx :=
      mkPartialTx
        (createdResources := [ Sudoku.mkResource
                               puzzleData
                               solution
                               0
                             ; Reward.mkResource 14
                             ];
        consumedResources := [ Sudoku.mkResource
                               puzzleData
                               (1 :: 2 :: replicate 14 0)
                               1
                             ; Dealer.mkResource puzzleData 1
                             ]);
    txs : List PartialTx :=
      [dealerPartialTx; alicePartialTx; bobPartialTx];

  in testCase
    "Sudoku"
    (assertTrue
      "expected Sudoku solutions to validate"
      (checkTransaction (Sudoku.logicFunctions puzzleData) txs));

emptyTest {{Partial}} : Test :=
  let
    emptyFunctions : Map LogicHash LogicFunction := Map.empty;
  in testCase
    "The empty set of partial transactions validates"
    (assertTrue
      "expected transactions to validate"
      (checkTransaction emptyFunctions nil));

tests {{Partial}} : List Test :=
  emptyTest :: [twoPartyExchange; sudoku];

main : IO :=
  runPartial
    Î» {{{_}} :=
      runTestSuite (testSuite "AARM simulator" tests)};
