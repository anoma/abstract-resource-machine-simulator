module Simulator;

import Simulator.Resource open public;
import Simulator.BuiltinResources open public;
import Simulator.Balance open public;
import Simulator.PartialTx open public;
import Simulator.Denomination open public;

import Stdlib.Prelude open;
import Stdlib.Debug.Fail open;
import Data.ByteString open public;

import Data.Map as Map;
open Map using {Map};
open Resource;

validPartialTx (m : Map
  LogicHash
  LogicFunction) (ptx : PartialTx) : Bool :=
  let
    getLogicFn (kind : ResourceKind) (res : Resource)
      : PartialTx -> Bool :=
      let
        hash : LogicHash := Resource.logicHash res;
      in case Map.lookup hash m of {
           | just f := f kind
           | _ :=
             failwith
               ("Could not find function associated with hash: "
                 ++str natToString hash)
         };
  in all
      λ {r := getLogicFn created r ptx}
      (createdResources ptx)
    && all
      λ {r := getLogicFn consumed r ptx}
      (consumedResources ptx);

mkBalance (r : Resource) : Balance :=
  balance ((denomination r, quantity r) :: nil);

balanceDelta (tx : PartialTx) : Balance :=
  subBalance
    (sumBalances (map mkBalance (consumedResources tx)))
    (sumBalances (map mkBalance (createdResources tx)));

checkTransaction (m : Map
  LogicHash
  LogicFunction) (ptxs : List PartialTx) : Bool :=
  let
    allValid : Bool := all (validPartialTx m) ptxs;
    sumDeltasIsZero : Bool :=
      balanceIsZero (sumBalances (map balanceDelta ptxs));
  in allValid && sumDeltasIsZero;
