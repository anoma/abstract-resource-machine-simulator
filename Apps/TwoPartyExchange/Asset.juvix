module Apps.TwoPartyExchange.Asset;

import Simulator open;
import Simulator.Resource open using {mkResource as mkResource'};

import Data.Map as Map open using {Map};

import Simulator.Prelude open;

--- Definitions related to the Dolphin ;Resource;
module Dolphin;
  label : ByteString := [0];

  mkResource (n : Int) : Resource :=
    mkResource'
      (logicHash := AlwaysValid.logicHash;
      label := label;
      data := nil;
      quantity := n);

  kind : Kind :=
    AlwaysValid.logicHash :: label;
end;

--- Definitions related to the A ;Resource;
module A;
  label : ByteString := [1];

  mkResource (n : Int) : Resource :=
    mkResource'
      (logicHash := AlwaysValid.logicHash;
      label := label;
      data := nil;
      quantity := n);

  kind : Kind :=
    AlwaysValid.logicHash :: label;
end;

--- Definitions related to the B ;Resource;
module B;
  label : ByteString := [2];

  mkResource (n : Int) : Resource :=
    mkResource'
      (logicHash := AlwaysValid.logicHash;
      label := label;
      data := nil;
      quantity := n);

  kind : Kind :=
    AlwaysValid.logicHash :: label;
end;
