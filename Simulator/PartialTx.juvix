module Simulator.PartialTx;

import Stdlib.Prelude open;
import Simulator.Resource open;

--- A partial transaction consists of two consumed resources and two
--- of created resources
type PartialTx :=
  mkPartialTx {
    consumedPair : Resource × Resource;
    createdPair : Resource × Resource
  };

open PartialTx;

consumedResources (ptx : PartialTx) : List Resource :=
  case consumedPair ptx of {r1, r2 := [r1; r2]};

createdResources (ptx : PartialTx) : List Resource :=
  case createdPair ptx of {r1, r2 := [r1; r2]};

{-- A function that determines whether a ;PartialTx; is valid

Arguments:

* kind: Indicating whether the resource associated with this logic function
 was consumed or created in the subject ;PartialTx;.

* partialTx: The ;PartialTx; being validated. --}

LogicFunction : Type := ResourceKind -> PartialTx -> Bool;

instance
ordPartialTx : Ord PartialTx :=
  let
    prod (r : PartialTx) : List Resource × List Resource :=
      consumedResources r, createdResources r;

    go (p1 : PartialTx) (p2 : PartialTx) : Ordering :=
      Ord.cmp (prod p1) (prod p2);
  in mkOrd go;
